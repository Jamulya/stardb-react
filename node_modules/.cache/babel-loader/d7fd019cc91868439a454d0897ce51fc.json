{"ast":null,"code":"import React from 'react';\nconst {\n  Provider: SwapiProvider,\n  Consumer: SwapiConsumer\n} = /*#__PURE__*/React.createContext();\nexport { SwapiProvider, SwapiConsumer };\nexport default class SwapiService {\n  constructor() {\n    this._apiBase = 'https://swapi.dev/api';\n    this._imageBase = 'https://starwars-visualguide.com/assets/img';\n\n    this.getResource = async url => {\n      const res = await fetch(`${this._apiBase}${url}`);\n\n      if (!res.ok) {\n        throw new Error(`Could not fetch ${url}` + `, received ${res.status}`);\n      }\n\n      return await res.json();\n    };\n\n    this.getAllPeople = async () => {\n      const res = await this.getResource(`/people/`);\n      return res.results.map(this._transformPerson).slice(0, 5);\n    };\n\n    this.getPerson = async id => {\n      const person = await this.getResource(`/people/${id}/`);\n      return this._transformPerson(person);\n    };\n\n    this.getAllPlanets = async () => {\n      const res = await this.getResource(`/planets/`);\n      return res.results.map(this._transformPlanet).slice(0, 5);\n    };\n\n    this.getPlanet = async id => {\n      const planet = await this.getResource(`/planets/${id}/`);\n      return this._transformPlanet(planet);\n    };\n\n    this.getAllStarships = async () => {\n      const res = await this.getResource(`/starships/`);\n      return res.results.map(this._transformStarship).slice(0, 5);\n    };\n\n    this.getStarship = async id => {\n      const starship = await this.getResource(`/starships/${id}/`);\n      return this._transformStarship(starship);\n    };\n\n    this.getPersonImage = ({\n      id\n    }) => {\n      return `${this._imageBase}/characters/${id}.jpg`;\n    };\n\n    this.getStarshipImage = ({\n      id\n    }) => {\n      return `${this._imageBase}/starships/${id}.jpg`;\n    };\n\n    this.getPlanetImage = ({\n      id\n    }) => {\n      return `${this._imageBase}/planets/${id}.jpg`;\n    };\n\n    this._extractId = item => {\n      const idRegExp = /\\/([0-9]*)\\/$/;\n      return item.url.match(idRegExp)[1];\n    };\n\n    this._transformPlanet = planet => {\n      return {\n        id: this._extractId(planet),\n        name: planet.name,\n        population: planet.population,\n        rotationPeriod: planet.rotation_period,\n        diameter: planet.diameter\n      };\n    };\n\n    this._transformStarship = starship => {\n      return {\n        id: this._extractId(starship),\n        name: starship.name,\n        model: starship.model,\n        manufacturer: starship.manufacturer,\n        costInCredits: starship.cost_in_credits,\n        length: starship.length,\n        crew: starship.crew,\n        passengers: starship.passengers,\n        cargoCapacity: starship.cargo_capacity\n      };\n    };\n\n    this._transformPerson = person => {\n      return {\n        id: this._extractId(person),\n        name: person.name,\n        gender: person.gender,\n        birthYear: person.birth_year,\n        eyeColor: person.eye_color\n      };\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Aijamal/Documents/GitHub/stardb-react/src/components/swapi-service-context/swapi-service-context.js"],"names":["React","Provider","SwapiProvider","Consumer","SwapiConsumer","createContext","SwapiService","_apiBase","_imageBase","getResource","url","res","fetch","ok","Error","status","json","getAllPeople","results","map","_transformPerson","slice","getPerson","id","person","getAllPlanets","_transformPlanet","getPlanet","planet","getAllStarships","_transformStarship","getStarship","starship","getPersonImage","getStarshipImage","getPlanetImage","_extractId","item","idRegExp","match","name","population","rotationPeriod","rotation_period","diameter","model","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","cargo_capacity","gender","birthYear","birth_year","eyeColor","eye_color"],"mappings":"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","sourcesContent":["import React from 'react';\n\nconst {\n  Provider: SwapiProvider,\n  Consumer: SwapiConsumer\n} = React.createContext();\n\nexport {SwapiProvider, SwapiConsumer}\n\nexport default class SwapiService {\n\n  _apiBase = 'https://swapi.dev/api';\n  _imageBase = 'https://starwars-visualguide.com/assets/img';\n\n  getResource = async (url) => {\n    const res = await fetch(`${this._apiBase}${url}`);\n\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${url}` +\n        `, received ${res.status}`)\n    }\n    return await res.json();\n  };\n\n  getAllPeople = async () => {\n    const res = await this.getResource(`/people/`);\n    return res.results\n      .map(this._transformPerson)\n      .slice(0, 5);\n  };\n\n  getPerson = async (id) => {\n    const person = await this.getResource(`/people/${id}/`);\n    return this._transformPerson(person);\n  };\n\n  getAllPlanets = async () => {\n    const res = await this.getResource(`/planets/`);\n    return res.results\n      .map(this._transformPlanet)\n      .slice(0, 5);\n  };\n\n  getPlanet = async (id) => {\n    const planet = await this.getResource(`/planets/${id}/`);\n    return this._transformPlanet(planet);\n  };\n\n  getAllStarships = async () => {\n    const res = await this.getResource(`/starships/`);\n    return res.results\n      .map(this._transformStarship)\n      .slice(0, 5);\n  };\n\n  getStarship = async (id) => {\n    const starship = await this.getResource(`/starships/${id}/`);\n    return this._transformStarship(starship);\n  };\n\n  getPersonImage = ({id}) => {\n    return `${this._imageBase}/characters/${id}.jpg`\n  };\n\n  getStarshipImage = ({id}) => {\n    return `${this._imageBase}/starships/${id}.jpg`\n  };\n\n  getPlanetImage = ({id}) => {\n    return `${this._imageBase}/planets/${id}.jpg`\n  };\n\n  _extractId = (item) => {\n    const idRegExp = /\\/([0-9]*)\\/$/;\n    return item.url.match(idRegExp)[1];\n  };\n\n  _transformPlanet = (planet) => {\n    return {\n      id: this._extractId(planet),\n      name: planet.name,\n      population: planet.population,\n      rotationPeriod: planet.rotation_period,\n      diameter: planet.diameter\n    };\n  };\n\n  _transformStarship = (starship) => {\n    return {\n      id: this._extractId(starship),\n      name: starship.name,\n      model: starship.model,\n      manufacturer: starship.manufacturer,\n      costInCredits: starship.cost_in_credits,\n      length: starship.length,\n      crew: starship.crew,\n      passengers: starship.passengers,\n      cargoCapacity: starship.cargo_capacity\n    }\n  };\n\n  _transformPerson = (person) => {\n    return {\n      id: this._extractId(person),\n      name: person.name,\n      gender: person.gender,\n      birthYear: person.birth_year,\n      eyeColor: person.eye_color\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}